/* 

Костыли и велосипеды:
как не нужно писать код
Полезно многим, а то и всем 
Ч.1

Писать код – это легко

Угадай, если сможешь...

1 Method
2 ShowNumbers
3 CreateArray
4 ShowNums
5 Ar
6 Numbers

Как мы пишем код?








Что в этом коде можно улучшить?

Что в этом коде можно улучшить?
1 Имя переменных
2 Имя метода
3 Имена аргументов метода и ещё кое-что...

Что в этом коде можно улучшить?

Design guidelines:
https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/ 


Код читается больше, чем пишется,
не нужно экономить на понятности
и чистоте кода ради скорости.


Старайтесь не использовать сокращения
кроме общепринятых в разрабатываемом
продукте.


Когда придумываете название для
общедоступной единицы, старайтесь
не использовать имена, потенциально
или явно конфликтующие со стандартными
идентификаторами.

Используйте имена с простым написанием.
Их проще читать и набирать.
Избегайте (в разумных пределах)
использования слов с двойными буквами,
сложным чередованием согласных.

Никогда не используйте
матерные (запрещённые) слова в коде
(в том числе в комментариях).

Например:

● Идентификатор HorizontalAlignment легче читается на английском, 
  чем AlignmentHorizontal

● Имя CanScrollHorizontally лучше, чем ScrollableX (неочевидная ссылка на ось X)

● НЕ используйте знаки подчеркивания, дефисы и другие символы, 
  не являющиеся буквенно-цифровыми - Can_Scroll_Horizontally

  int _x;

● ИЗБЕГАЙТЕ использования идентификаторов, совпадающих с ключевыми
словами широко используемых языков программирования
string class = "1B";
https://docs.microsoft.com/ru-ru/dotnet/csharp/language-reference/keywords/
https://docs.swift.org/swift-book/ReferenceManual/LexicalStructu

● Старайтесь не использовать сокращения, GetWindow,
  проще понять, чем GetWin


● НЕ используйте акронимы, которые не являются широко принятыми, 
  и в целом используется акронимы только при необходимости - 
  SendPM(int i, string t) точно хуже, чем SendPrivateMessage(int id, string text)

● Используйте универсальные имена платформы, не относящееся к конкретному языку : 
  ConvertToByte(string value); против ConvertToUnsignedChar(string value);

● Используйте общие, не привязанные к контексту имена, когда это нужно 
  ConvertToByte(string value); лучше, чем ConvertToByte(string str);

● Именование методов, аргументов, переменных и других системные единиц отличается.

Нотации: 

Pascal – указание этого стиля оформления идентификатора обозначает, что
первая буква заглавная и все последующие первые буквы слов тоже заглавные.

Например: BackColor, LastModified, DateTime.

Camel – указание этого стиля обозначает, что первая буква строчная, а остальные
первые буквы слов заглавные.

Например: borderColor, accessTime, templateName.

Ещё: 

Избегайте длинных строк, переносите инструкцию на новую строку.

Не размещайте несколько инструкций на одной строке.
Каждая инструкция должна начинаться с новой строки.

При разбивке длинных выражений на несколько строк,
оставляйте операторы на новой строке (пример ниже).


Используйте автоформатирование кода вашей IDE после модификации кода.


Моё любимое! :D
bool Metodi(int chislo)
{
 bool resultati = false;
 if( chislo % 2==0 )
{ resultati = true;
 }
 else{resultati = false; }
 if (resultati == false)
{ return false;
 } else {
return true;
}
}



Моё любимое! :D
bool Metodi(int chislo)
{
    bool resultati = false;
    if (chislo % 2 == 0)
    {
        resultati = true;
    }
    else
    {
        resultati = false;
    }
    if (resultati == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Моё любимое! :D
bool Metodi(int chislo)
{
    bool resultati = false;
    if (chislo % 2 == 0) { resultati = true; }
    else { resultati = false; }
    if (resultati == false) { return false; }
    else { return true; }
}


Моё любимое! :D
bool Metodi(int chislo)
{
    bool resultati = false;
    if (chislo % 2 == 0) { resultati = true; }
    else { resultati = false; }
    return resultati;
}

Моё любимое! :D
bool Metodi(int chislo)
{
 bool resultati = false;
 if (chislo % 2 == 0) { return true; }
 else { return false; }
}

Моё любимое! :D
bool Metodi(int chislo)
{
    if (chislo % 2 == 0) { return true; }
    else { return false; }
}

Моё любимое! :D
bool Metodi(int chislo)
{
    if (chislo % 2 == 0) return true;
    else return false;
}


Моё любимое! :D
bool Metodi(int chislo)
{
    return chislo % 2 == 0);
}


Моё любимое! :D
bool IsEven(int value)
{
    return value % 2 == 0;
}

Моё любимое! :D
* bool IsEven(int value) => value % 2 == 0;

Моё любимое! :D
** var IsEven = (int v) => v % 2 == 0;





Ещё про bool 
Не используйте проверки вида b == false.
Вместо этого используйте !b

Такой метод никому не нужен)

Я тоже так думал, но потом нашёл
https://www.npmjs.com//is-even 

Дополнение
Красивый код: какой он?

● Для методов используйте нотацию Pascal (вне зависимости отобласти видимости метода)
  GetStream()
● Если метод асинхронный - он заканчивается на "Async" 
  GetStreamAsync()

● Для именования переменных используйте нотацию Camel.

● Используйте неявную типизацию (var) для локальных переменных в случаях, 
  когда тип переменной понятен из правой части назначения или когда точный тип не важен.

ДЕМОНСТРАЦИЯ

● Объявляйте переменные непосредственно перед
  их использованием.

● Счетчики в циклах i, j, k, l, m, n, если этого не требует условие.

● Инициализируйте переменные при объявлении,
если есть такая возможность.

Цепочки вызовов стоят особняком

SaveToFile(
    PrintArraySumElements (
        SumElements(
            GetArrayElements (
                PrintMatrix(
                    MultiplicationMatrixByNumber (
                        PrintMatrix(
                            FillMatrix(
                                CreateMatrix(5, 5))),
                10))))));


Порядок функций, констант, методов, свойств

Исключения, пространства имен, классы,
интерфейсы, свойства, индексаторы и блаблабла

...а ещё в других языках


Комментарии и документирование

● Внутри блока с кодом отделяйте текст комментария одним пробелом 
  «// Текст комментария.»

● Неиспользуемый код не комментируйте, а удаляйте.

● Если код комментируется временно - он должен быть с пометкой
  «// TODO: причина почему код закомментирован».

● *Используйте XML-документирование для описания публичных типов и их элементов. 
  Начинайте текст комментария с большой буквы и завершайте текст комментария точкой.

● **Использование словарей для подсветки ошибок русского\английского языка.



*/